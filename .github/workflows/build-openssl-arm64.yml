name: Build OpenSSL for Windows ARM64

on:
  workflow_dispatch:  # Manual trigger
  # Uncomment to run on schedule if needed
  # schedule:
  #  - cron: '0 0 1 * *'  # Monthly (first day of month at midnight UTC)

jobs:
  build-openssl-arm64:
    name: Build OpenSSL 3.5.0 for Windows ARM64
    runs-on: windows-11-arm
    
    env:
      OPENSSL_VERSION: 3.5.0
      INSTALL_DIR: ${{ runner.temp }}/openssl-install
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      shell: pwsh
      run: |
        # Install Perl and NASM (required for OpenSSL build)
        choco install strawberryperl -y
        choco install nasm -y

        # Add to PATH
        echo "C:\Strawberry\perl\bin" >> $env:GITHUB_PATH
        echo "C:\Program Files\NASM" >> $env:GITHUB_PATH

        # Set up Visual Studio Command Prompt environment
        # This makes tools like nmake available
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=arm64
        
        # Verify tools are available
        where perl
        where nasm
        where nmake
        where cl
    
    - name: Download OpenSSL source
      shell: pwsh
      run: |
        $opensslFile = "openssl-$env:OPENSSL_VERSION.tar.gz"
        $opensslUrl = "https://github.com/openssl/openssl/releases/download/openssl-$env:OPENSSL_VERSION/$opensslFile"
        
        Write-Host "Downloading OpenSSL $env:OPENSSL_VERSION from $opensslUrl"
        Invoke-WebRequest -Uri $opensslUrl -OutFile $opensslFile
        
        Write-Host "Extracting OpenSSL source"
        tar -xzf $opensslFile
    
    - name: Configure and build OpenSSL with MSVC
      shell: cmd
      run: |
        :: Set up Visual Studio environment for ARM64
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64

        :: Echo install directory for debugging
        echo "Install directory: %INSTALL_DIR%"

        :: Create install directory
        mkdir "%INSTALL_DIR%"

        :: Change to OpenSSL directory
        cd openssl-%OPENSSL_VERSION%
        
        :: Configure OpenSSL for Windows ARM64 with MSVC
        echo Configuring OpenSSL for Windows ARM64 with MSVC...
        perl Configure VC-WIN64-ARM --prefix="%INSTALL_DIR%" --openssldir="%INSTALL_DIR%"
        
        :: Build OpenSSL
        echo Building OpenSSL...
        nmake
        
        :: Run basic tests (can be skipped if they're problematic)
        echo Running tests...
        :: nmake test
        
        :: Install OpenSSL
        echo Installing OpenSSL...
        nmake install
        
        :: Verify installed files
        dir /s "%INSTALL_DIR%"

    - name: Rename and copy DLLs
      shell: pwsh
      run: |
        # Create bin directory if it doesn't exist
        New-Item -ItemType Directory -Force -Path "$env:INSTALL_DIR\bin"
        
        # Create properly named DLLs for ARM64
        $libssl = Get-Item "$env:INSTALL_DIR\lib\libssl*.dll" -ErrorAction SilentlyContinue
        $libcrypto = Get-Item "$env:INSTALL_DIR\lib\libcrypto*.dll" -ErrorAction SilentlyContinue
        
        if ($libssl) {
            Copy-Item $libssl.FullName -Destination "$env:INSTALL_DIR\bin\libssl-3-arm64.dll"
        }
        
        if ($libcrypto) {
            Copy-Item $libcrypto.FullName -Destination "$env:INSTALL_DIR\bin\libcrypto-3-arm64.dll"
        }
        
        # Verify ARM64 DLLs
        Get-ChildItem -Path "$env:INSTALL_DIR\bin" | Select-Object Name
    
    - name: Create OpenSSL package
      shell: pwsh
      run: |
        # Create a zip archive of the installation
        $packageDir = "openssl-$env:OPENSSL_VERSION-windows-arm64"
        New-Item -ItemType Directory -Force -Path $packageDir
        
        # Copy the installed files
        Copy-Item -Path "$env:INSTALL_DIR\*" -Destination $packageDir -Recurse
        
        # Create archive
        Compress-Archive -Path $packageDir -DestinationPath "$packageDir.zip"
    
    - name: Upload OpenSSL package
      uses: actions/upload-artifact@v4
      with:
        name: openssl-${{ env.OPENSSL_VERSION }}-windows-arm64
        path: openssl-${{ env.OPENSSL_VERSION }}-windows-arm64.zip