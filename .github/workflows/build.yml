name: Build Library

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build-ubuntu:
    name: Build on Ubuntu (${{ matrix.link-type }} OpenSSL)
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        link-type: [Static, Runtime]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install OpenSSL
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        if [ "${{ matrix.link-type }}" == "Runtime" ]; then
          cmake -DOPENSSL_RUNTIME_LINK=ON ..
        else
          cmake ..
        fi

    - name: Build
      run: |
        cd build
        make VERBOSE=1

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Create package
      run: |
        mkdir -p package
        ARTIFACT_NAME="echeck-ubuntu-$(date +%Y%m%d)-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}"
        mkdir -p "package/$ARTIFACT_NAME/bin"
        mkdir -p "package/$ARTIFACT_NAME/lib"
        mkdir -p "package/$ARTIFACT_NAME/include/echeck"
        
        # Copy files
        cp build/echeck "package/$ARTIFACT_NAME/bin/"
        cp build/libecheck.a "package/$ARTIFACT_NAME/lib/"
        cp include/echeck.h "package/$ARTIFACT_NAME/include/echeck/"
        cp README.md LICENSE* "package/$ARTIFACT_NAME/" 2>/dev/null || true
        
        # Create tarball
        cd package
        tar -czvf "$ARTIFACT_NAME.tar.gz" "$ARTIFACT_NAME"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echeck-ubuntu-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}
        path: package/*.tar.gz

  build-macos:
    name: Build on macOS (${{ matrix.link-type }} OpenSSL)
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        link-type: [Static, Runtime]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install OpenSSL
      run: |
        brew install openssl@3 || true
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        if [ "${{ matrix.link-type }}" == "Runtime" ]; then
          cmake -DOPENSSL_RUNTIME_LINK=ON -DCMAKE_C_FLAGS="-I$OPENSSL_INCLUDE_DIR" \
            -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR ..
        else
          cmake -DCMAKE_C_FLAGS="-I$OPENSSL_INCLUDE_DIR" \
            -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR ..
        fi

    - name: Build
      run: |
        cd build
        make VERBOSE=1

    - name: Run tests
      run: |
        cd build
        # Set DYLD_LIBRARY_PATH for macOS runtime tests
        export DYLD_LIBRARY_PATH=/opt/homebrew/opt/openssl@3/lib:$DYLD_LIBRARY_PATH
        ctest --output-on-failure

    - name: Create package
      run: |
        mkdir -p package
        ARTIFACT_NAME="echeck-macos-$(date +%Y%m%d)-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}"
        mkdir -p "package/$ARTIFACT_NAME/bin"
        mkdir -p "package/$ARTIFACT_NAME/lib"
        mkdir -p "package/$ARTIFACT_NAME/include/echeck"
        
        # Copy files
        cp build/echeck "package/$ARTIFACT_NAME/bin/"
        cp build/libecheck.a "package/$ARTIFACT_NAME/lib/"
        cp include/echeck.h "package/$ARTIFACT_NAME/include/echeck/"
        cp README.md LICENSE* "package/$ARTIFACT_NAME/" 2>/dev/null || true
        
        # Create tarball
        cd package
        tar -czvf "$ARTIFACT_NAME.tar.gz" "$ARTIFACT_NAME"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echeck-macos-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}
        path: package/*.tar.gz

  build-windows:
    name: Build on Windows x64 (${{ matrix.link-type }} OpenSSL)
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        link-type: [Static, Runtime]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install OpenSSL
      shell: pwsh
      run: |
        # Install OpenSSL using Chocolatey
        Write-Host "Installing OpenSSL using Chocolatey..."
        choco install openssl

        # Add diagnostic output to see what's installed and where
        Write-Host "Checking for OpenSSL installation directories..."
        # Check all possible OpenSSL installation locations
        $possiblePaths = @(
            "C:/Program Files/OpenSSL",
            "C:/Program Files/OpenSSL-Win64",
            "C:/OpenSSL",
            "C:/OpenSSL-Win64"
        )

        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                Write-Host "Found OpenSSL at: $path"
                Get-ChildItem -Path "$path" -Directory | ForEach-Object { Write-Host "  -> $($_.FullName)" }
            } else {
                Write-Host "Not found: $path"
            }
        }

        # Try to determine the exact OpenSSL version installed
        Write-Host "Checking OpenSSL executables..."
        $openssl = Get-Command openssl -ErrorAction SilentlyContinue
        if ($openssl) {
            Write-Host "OpenSSL executable found at: $($openssl.Source)"
            & openssl version
        } else {
            Write-Host "OpenSSL executable not found in PATH, trying known locations..."
            $opensslExes = Get-ChildItem -Path "C:/Program Files" -Recurse -Filter "openssl.exe" -ErrorAction SilentlyContinue
            foreach ($exe in $opensslExes) {
                Write-Host "Found: $($exe.FullName)"
                & $exe.FullName version
            }
        }

        # Determine the correct OpenSSL path
        if (Test-Path "C:/Program Files/OpenSSL") {
          $opensslPath = "C:/Program Files/OpenSSL"
        } elseif (Test-Path "C:/Program Files/OpenSSL-Win64") {
          $opensslPath = "C:/Program Files/OpenSSL-Win64"
        } else {
          Write-Host "ERROR: Could not find OpenSSL installation directory!"
          exit 1
        }

        echo "OPENSSL_ROOT_DIR=$opensslPath" >> $env:GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$opensslPath/include" >> $env:GITHUB_ENV

        Write-Host "Using OpenSSL installation at: $opensslPath"

        # List all directories in the OpenSSL installation
        Write-Host "OpenSSL directory structure:"
        Get-ChildItem -Path "$opensslPath" -Directory | ForEach-Object {
            Write-Host "Directory: $($_.FullName)"
            Get-ChildItem -Path $_.FullName | Select-Object -First 5 | ForEach-Object { Write-Host "  - $($_.Name)" }
        }

        # Verify library files exist
        Write-Host "OpenSSL libraries:"
        Get-ChildItem -Path "$opensslPath" -Recurse -Include *.lib | ForEach-Object { Write-Host "Lib: $($_.FullName)" }

        # Check for DLL files
        Write-Host "OpenSSL DLLs:"
        Get-ChildItem -Path "$opensslPath" -Recurse -Include *.dll | ForEach-Object { Write-Host "DLL: $($_.FullName)" }

    - name: Configure CMake
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path build
        cd build

        # Use simpler configuration with fewer variables
        # Let CMake's FindOpenSSL module do most of the work
        if ("${{ matrix.link-type }}" -eq "Runtime") {
          cmake -G "Visual Studio 17 2022" -A x64 -DOPENSSL_RUNTIME_LINK=ON `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            -DOPENSSL_INCLUDE_DIR="$env:OPENSSL_INCLUDE_DIR" ..
        } else {
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            -DOPENSSL_INCLUDE_DIR="$env:OPENSSL_INCLUDE_DIR" ..
        }

    - name: Build
      shell: pwsh
      run: |
        cd build
        cmake --build . --config Release

    - name: Run tests
      shell: pwsh
      continue-on-error: true
      run: |
        cd build
        ctest -C Release --output-on-failure

    - name: Create package
      shell: pwsh
      run: |
        $linkType = "${{ matrix.link-type }}"
        $linkTypeLower = if ($linkType -eq "Runtime") { "runtime" } else { "static" }
        
        # Create artifact directory
        $ARTIFACT_NAME = "echeck-windows-x64-$(Get-Date -Format 'yyyyMMdd')-$linkTypeLower"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/bin"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/lib"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/include/echeck"
        
        # Copy files
        Copy-Item "build/Release/echeck.exe" -Destination "package/$ARTIFACT_NAME/bin/"
        Copy-Item "build/Release/echeck.lib" -Destination "package/$ARTIFACT_NAME/lib/"
        Copy-Item "include/echeck.h" -Destination "package/$ARTIFACT_NAME/include/echeck/"
        Copy-Item "README.md" -Destination "package/$ARTIFACT_NAME/" -ErrorAction SilentlyContinue
        Copy-Item "LICENSE*" -Destination "package/$ARTIFACT_NAME/" -ErrorAction SilentlyContinue
        
        # Create zip archive
        Compress-Archive -Path "package/$ARTIFACT_NAME" -DestinationPath "package/$ARTIFACT_NAME.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echeck-windows-x64-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}
        path: package/*.zip
        
  build-windows-arm64:
    name: Build on Windows ARM64 (${{ matrix.link-type }} OpenSSL)
    # Use dedicated Windows ARM64 runner
    runs-on: windows-11-arm
    strategy:
      fail-fast: false
      matrix:
        link-type: [Static, Runtime]

    steps:
    - uses: actions/checkout@v4

    - name: Download and Install OpenSSL for ARM64
      shell: pwsh
      run: |
        # Download the custom-built OpenSSL ARM64 artifact
        Write-Host "Downloading OpenSSL ARM64 artifact..."

        # Create temp directory for OpenSSL
        New-Item -ItemType Directory -Force -Path "openssl-arm64"

        # Download the latest successful artifact from our other workflow
        # Set GitHub token as an environment variable for gh CLI
        $env:GH_TOKEN = "${{ secrets.GITHUB_TOKEN }}"

        # Download using GitHub CLI
        Write-Host "Downloading OpenSSL ARM64 artifact using GitHub CLI..."
        gh run download --repo ${{ github.repository }} --name openssl-3.5.0-windows-arm64 --dir openssl-arm64-temp

        # Extract the artifact
        Write-Host "Extracting OpenSSL ARM64 artifact..."
        $zipFile = Get-ChildItem -Path "openssl-arm64-temp" -Filter "*.zip" | Select-Object -First 1
        if ($zipFile) {
          Expand-Archive -Path $zipFile.FullName -DestinationPath "openssl-arm64"
          $opensslDir = Get-ChildItem -Path "openssl-arm64" -Directory | Select-Object -First 1
          $opensslPath = $opensslDir.FullName  # Use the full path without Join-Path

          Write-Host "Extracted OpenSSL to: $opensslPath"

          # List the directory structure to debug
          Write-Host "Listing OpenSSL directory structure:"
          Get-ChildItem -Path "$opensslPath" -Recurse | Select-Object FullName | ForEach-Object { $_.FullName }
        } else {
          # Fallback to the pre-installed OpenSSL if download fails
          Write-Host "Download failed, falling back to installed OpenSSL..."
          if (Test-Path "C:/Program Files/OpenSSL") {
            $opensslPath = "C:/Program Files/OpenSSL"
          } elseif (Test-Path "C:/Program Files/OpenSSL-Win64") {
            $opensslPath = "C:/Program Files/OpenSSL-Win64"
          } else {
            Write-Host "ERROR: Could not find OpenSSL installation directory!"
            exit 1
          }
        }

        # Verify that we have the necessary OpenSSL ARM64 DLLs
        $libsslFound = Test-Path "$opensslPath/bin/libssl-3-arm64.dll"
        $libcryptoFound = Test-Path "$opensslPath/bin/libcrypto-3-arm64.dll"

        if (-not $libsslFound -or -not $libcryptoFound) {
            Write-Host "ERROR: Required OpenSSL ARM64 DLLs not found!"
            Write-Host "libssl-3-arm64.dll exists: $libsslFound"
            Write-Host "libcrypto-3-arm64.dll exists: $libcryptoFound"
            exit 1
        }

        # Set OpenSSL paths for CMake
        echo "OPENSSL_ROOT_DIR=$opensslPath" >> $env:GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$opensslPath/include" >> $env:GITHUB_ENV

        # If we're using our custom ARM64 build, also set library paths for static builds
        if ($zipFile) {
          echo "OPENSSL_CRYPTO_LIBRARY=$opensslPath/lib/libcrypto.lib" >> $env:GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=$opensslPath/lib/libssl.lib" >> $env:GITHUB_ENV
        }

        Write-Host "Using OpenSSL installation at: $opensslPath"

        # Verify OpenSSL installation by listing key files
        Write-Host "Verifying OpenSSL installation:"
        Get-ChildItem -Path "$opensslPath" -Recurse -Include *.dll, *.lib, *.h | Select-Object -First 20 | ForEach-Object { $_.FullName }

    - name: Configure CMake
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path build
        cd build
        # Use the link-type matrix variable to decide between static and runtime
        if ("${{ matrix.link-type }}" -eq "Runtime") {
          cmake -G "Visual Studio 17 2022" -A ARM64 -DOPENSSL_RUNTIME_LINK=ON `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            -DOPENSSL_INCLUDE_DIR="$env:OPENSSL_INCLUDE_DIR" ..
        } else {
          # For static mode, we still need to use runtime OpenSSL on ARM64 for now,
          # but we don't define OPENSSL_RUNTIME_LINK so it links with stubs
          cmake -G "Visual Studio 17 2022" -A ARM64 `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            -DOPENSSL_INCLUDE_DIR="$env:OPENSSL_INCLUDE_DIR" ..
        }

    - name: Build
      shell: pwsh
      run: |
        cd build
        cmake --build . --config Release
        
        # Set stack size limit to 131072 bytes (128KB) using editbin
        Write-Host "Setting stack size to 131072 bytes to catch infinite recursion"
        # Find editbin.exe location
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        $editbin = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" -Recurse -Filter "editbin.exe" | Where-Object { $_.FullName -like "*ARM64*" } | Select-Object -First 1
        Write-Host "Using editbin: $($editbin.FullName)"
        # Apply stack size limit to executable
        & $editbin.FullName /STACK:131072 "Release\echeck.exe"
        Write-Host "Stack size updated to 131072 bytes"

    - name: Run tests
      shell: pwsh
      continue-on-error: true
      run: |
        cd build

        # Copy OpenSSL DLLs to the Release directory for tests
        Write-Host "Copying OpenSSL ARM64 DLLs to Release directory for tests"
        if (Test-Path "$env:OPENSSL_ROOT_DIR/bin/libssl-3-arm64.dll") {
          Copy-Item "$env:OPENSSL_ROOT_DIR/bin/libssl-3-arm64.dll" -Destination "Release/"
          Copy-Item "$env:OPENSSL_ROOT_DIR/bin/libcrypto-3-arm64.dll" -Destination "Release/"

          # List DLLs in Release directory
          Write-Host "DLLs in Release directory:"
          Get-ChildItem -Path "Release" -Include *.dll | ForEach-Object { $_.FullName }
        } else {
          Write-Host "ERROR: Required OpenSSL ARM64 DLLs not found for tests!"
          Write-Host "Searched in: $env:OPENSSL_ROOT_DIR/bin/"
          Get-ChildItem -Path "$env:OPENSSL_ROOT_DIR" -Recurse -Include *.dll | Select-Object -First 20 | ForEach-Object { $_.FullName }
        }

        # Test program to verify DLL loading
        Write-Host "Testing binary with OpenSSL DLLs:"
        try {
          & "./Release/echeck.exe" --help
        } catch {
          Write-Host "Error running test program: $_"
        }

        # For static build, try to run the sample manually first
        if ("${{ matrix.link-type }}" -eq "Static") {
            # List test files for debugging
            Write-Host "Listing contents of test directory:"
            Get-ChildItem -Path "../test" | ForEach-Object { $_.FullName }

            # Display the content of the test files
            Write-Host "Content of sample.pem (first 20 lines):"
            if (Test-Path "../test/sample.pem") {
                Get-Content "../test/sample.pem" -TotalCount 20 | ForEach-Object { Write-Host $_ }
            }

            # Try to manually run the test with the sample file with more debugging options
            Write-Host "Manually running echeck with test sample:"

            # Use the Windows built-in Dr. Watson debugger to capture a crash dump
            $env:_NT_ALT_SYMBOL_PATH = "srv*c:\symbols*https://msdl.microsoft.com/download/symbols"

            # Enable crash dumps
            Write-Host "Setting up crash dump collection..."

            # Check the OpenSSL link type in CMake cache
            Write-Host "Checking CMake cache for OpenSSL configuration:"
            if (Test-Path "CMakeCache.txt") {
                Get-Content "CMakeCache.txt" | Select-String "OPENSSL" | ForEach-Object { Write-Host $_ }
            }

            # Check linked libraries
            Write-Host "Examining linked libraries in echeck.exe:"
            if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
                & dumpbin /DEPENDENTS ./Release/echeck.exe
            } else {
                Write-Host "dumpbin tool not available"
            }

            # Set up crash dump collection using Windows Error Reporting
            Write-Host "Setting up WER for crash dump collection..."

            # Create a temporary directory for crash dumps
            New-Item -ItemType Directory -Force -Path "crash_dumps"
            $crashDumpPath = Join-Path (Get-Location) "crash_dumps"

            # Install Procdump using Chocolatey if available
            Write-Host "Attempting to install Procdump for crash captures..."
            & choco install procdump -y --no-progress

            # Try running echeck with Procdump if available
            try {
                if (Get-Command procdump -ErrorAction SilentlyContinue) {
                    Write-Host "Running echeck.exe with Procdump monitoring..."
                    & procdump -ma -e 1 -x "crash_dumps" ".\Release\echeck.exe" "../test/sample.pem" -v
                } else {
                    Write-Host "Procdump not found, trying alternate paths..."
                    $procdumpPaths = @(
                        "C:\ProgramData\chocolatey\bin\procdump.exe",
                        "C:\ProgramData\chocolatey\bin\procdump64.exe"
                    )

                    $procdumpFound = $false
                    foreach ($path in $procdumpPaths) {
                        if (Test-Path $path) {
                            Write-Host "Found Procdump at: $path"
                            & $path -ma -e 1 -x "crash_dumps" ".\Release\echeck.exe" "../test/sample.pem" -v
                            $procdumpFound = $true
                            break
                        }
                    }

                    if (-not $procdumpFound) {
                        Write-Host "Procdump not found, skipping procdump monitoring"
                    }
                }
            } catch {
                Write-Host "Error using Procdump: $_"
            }

            # Now try the actual echeck program
            $ErrorActionPreference = "Continue"

            try {
                # Try to run with debugging
                Write-Host "Running echeck with verbose output:"
                & "./Release/echeck.exe" "../test/sample.pem" -v 2>&1
                Write-Host "Exit code: $LASTEXITCODE"
            } catch {
                Write-Host "Error running echeck with test file: $_"
                Write-Host "Exception details: $($_.Exception.GetType().FullName)"
                Write-Host "Exception message: $($_.Exception.Message)"
            }
        }

        # Run the actual tests
        ctest -C Release --output-on-failure

        # If we have crash dumps, upload them as artifacts
        if ("${{ matrix.link-type }}" -eq "Static") {
            if (Test-Path "crash_dumps") {
                Write-Host "Checking for crash dumps..."
                $dumps = Get-ChildItem -Path "crash_dumps" -Filter "*.dmp"
                foreach ($dump in $dumps) {
                    Write-Host "Found crash dump: $($dump.FullName)"
                }

                # If dumps were created, analyze them and prepare for upload
                if ($dumps.Count -gt 0) {
                    Write-Host "Creating crash dump archive..."
                    Compress-Archive -Path "crash_dumps/*" -DestinationPath "crash_dumps.zip"

                    # Try to analyze the crash dump using the Windows Debugging Tools
                    Write-Host "Attempting to analyze crash dump..."

                    # Install Debugging Tools for Windows if needed
                    Write-Host "Installing Windows Debugging Tools..."
                    & choco install windbg -y --params "/NoDesktopShortcut /NoStartMenu" --no-progress

                    # Try to find cdb.exe (Command-line debugger)
                    $cdbPath = $null
                    $possibleCdbPaths = @(
                        "C:\Program Files (x86)\Windows Kits\10\Debuggers\arm64\cdb.exe",
                        "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\cdb.exe",
                        "C:\Program Files\Debugging Tools for Windows (x64)\cdb.exe",
                        "C:\Program Files (x86)\Windows Kits\10\Debuggers\arm\cdb.exe"
                    )

                    foreach ($path in $possibleCdbPaths) {
                        if (Test-Path $path) {
                            $cdbPath = $path
                            Write-Host "Found debugger at: $cdbPath"
                            break
                        }
                    }

                    if ($cdbPath) {
                        foreach ($dump in $dumps) {
                            Write-Host "Analyzing dump file: $($dump.FullName)"

                            # Run cdb with direct commands
                            Write-Host "Running stack trace analysis..."
                            # Run each command separately to ensure reliable output
                            Write-Host "==== EXCEPTION CONTEXT ====="
                            & $cdbPath -z $dump.FullName -c ".ecxr;q" | Tee-Object -FilePath "ecxr_output.txt"

                            Write-Host "==== STACK TRACE ===== (not shown because huge)"
                            & $cdbPath -z $dump.FullName -c "k ffff;q" | Out-File -FilePath "stack_trace.txt"
                            
                            Write-Host "==== UNIQUE STACK TRACE ====="
                            & $cdbPath -z $dump.FullName -c "!uniqstack;q" | Tee-Object -FilePath "uniq_stack_trace.txt"

                            Write-Host "==== LOADED MODULES ====="
                            & $cdbPath -z $dump.FullName -c "lmv;q" | Tee-Object -FilePath "modules.txt"

                            Write-Host "==== CRASH ANALYSIS ====="
                            & $cdbPath -z $dump.FullName -c "!analyze -v;q" | Tee-Object -FilePath "crash_analysis.txt"
                        }
                    } else {
                        Write-Host "Windows Debugger not found, skipping stack trace analysis"

                        # Try to use dumpchk.exe if available
                        if (Get-Command dumpchk -ErrorAction SilentlyContinue) {
                            foreach ($dump in $dumps) {
                                Write-Host "Verifying dump file with dumpchk: $($dump.FullName)"
                                & dumpchk $dump.FullName
                            }
                        }
                    }
                }
            }
        }

    - name: Create package
      shell: pwsh
      run: |
        $linkType = "${{ matrix.link-type }}"
        $linkTypeLower = if ($linkType -eq "Runtime") { "runtime" } else { "static" }

        # Create artifact directory
        $ARTIFACT_NAME = "echeck-windows-arm64-$(Get-Date -Format 'yyyyMMdd')-$linkTypeLower"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/bin"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/lib"
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/include/echeck"

        # Copy files
        Copy-Item "build/Release/echeck.exe" -Destination "package/$ARTIFACT_NAME/bin/"
        Copy-Item "build/Release/echeck.lib" -Destination "package/$ARTIFACT_NAME/lib/"
        Copy-Item "include/echeck.h" -Destination "package/$ARTIFACT_NAME/include/echeck/"
        Copy-Item "README.md" -Destination "package/$ARTIFACT_NAME/" -ErrorAction SilentlyContinue
        Copy-Item "LICENSE*" -Destination "package/$ARTIFACT_NAME/" -ErrorAction SilentlyContinue

        # Create OpenSSL DLLs directory for runtime use and copy the ARM64 DLLs
        New-Item -ItemType Directory -Force -Path "package/$ARTIFACT_NAME/bin/openssl"

        # Copy OpenSSL ARM64 DLLs to the package
        Write-Host "Copying OpenSSL ARM64 DLLs to package"
        Copy-Item "$env:OPENSSL_ROOT_DIR/bin/libssl-3-arm64.dll" -Destination "package/$ARTIFACT_NAME/bin/openssl/"
        Copy-Item "$env:OPENSSL_ROOT_DIR/bin/libcrypto-3-arm64.dll" -Destination "package/$ARTIFACT_NAME/bin/openssl/"

        # Create zip archive
        Compress-Archive -Path "package/$ARTIFACT_NAME" -DestinationPath "package/$ARTIFACT_NAME.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echeck-windows-arm64-${{ matrix.link-type == 'Runtime' && 'runtime' || 'static' }}
        path: package/*.zip

    - name: Upload crash dumps
      if: ${{ matrix.link-type == 'Static' }}
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: crash-dumps-windows-arm64
        path: |
          build/crash_dumps.zip
          build/*.txt
          build/ecxr_output.txt
          build/stack_trace.txt
          build/uniq_stack_trace.txt
          build/modules.txt
          build/crash_analysis.txt
        if-no-files-found: ignore

  release-artifacts:
    name: Upload artifacts to release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-ubuntu, build-macos, build-windows, build-windows-arm64]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Upload artifacts to release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { repo } = context;
          
          // Get the release ID
          const release = context.payload.release;
          
          // Iterate through all downloaded artifacts
          const artifactsDir = 'artifacts';
          const artifacts = fs.readdirSync(artifactsDir);
          
          for (const artifact of artifacts) {
            const artifactDir = path.join(artifactsDir, artifact);
            const files = fs.readdirSync(artifactDir);
            
            for (const file of files) {
              const filePath = path.join(artifactDir, file);
              console.log(`Uploading ${filePath} to release ${release.id}`);
              
              const fileContent = fs.readFileSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: file,
                data: fileContent
              });
            }
          }
